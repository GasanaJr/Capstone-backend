function cov_hh5l20act(){var path="C:\\Users\\HP\\OneDrive\\Desktop\\Capstone-backend\\backend\\Auth\\routes\\posts.js";var hash="7957b72e55a4373b45228fded6e647d011e3fd3d";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\HP\\OneDrive\\Desktop\\Capstone-backend\\backend\\Auth\\routes\\posts.js",statementMap:{"0":{start:{line:1,column:16},end:{line:1,column:34}},"1":{start:{line:2,column:15},end:{line:2,column:31}},"2":{start:{line:3,column:13},end:{line:3,column:38}},"3":{start:{line:4,column:13},end:{line:4,column:38}},"4":{start:{line:5,column:15},end:{line:5,column:32}},"5":{start:{line:6,column:13},end:{line:6,column:28}},"6":{start:{line:7,column:15},end:{line:7,column:39}},"7":{start:{line:11,column:14},end:{line:19,column:3}},"8":{start:{line:13,column:9},end:{line:13,column:29}},"9":{start:{line:16,column:19},end:{line:16,column:50}},"10":{start:{line:17,column:9},end:{line:17,column:36}},"11":{start:{line:25,column:13},end:{line:27,column:3}},"12":{start:{line:70,column:0},end:{line:78,column:3}},"13":{start:{line:72,column:3},end:{line:77,column:4}},"14":{start:{line:73,column:18},end:{line:73,column:35}},"15":{start:{line:74,column:4},end:{line:74,column:20}},"16":{start:{line:76,column:4},end:{line:76,column:29}},"17":{start:{line:143,column:0},end:{line:163,column:3}},"18":{start:{line:145,column:21},end:{line:145,column:78}},"19":{start:{line:146,column:21},end:{line:151,column:8}},"20":{start:{line:152,column:6},end:{line:154,column:7}},"21":{start:{line:153,column:9},end:{line:153,column:36}},"22":{start:{line:155,column:6},end:{line:160,column:7}},"23":{start:{line:156,column:23},end:{line:156,column:40}},"24":{start:{line:157,column:6},end:{line:157,column:38}},"25":{start:{line:159,column:9},end:{line:159,column:34}},"26":{start:{line:220,column:0},end:{line:227,column:3}},"27":{start:{line:221,column:4},end:{line:226,column:5}},"28":{start:{line:222,column:17},end:{line:222,column:55}},"29":{start:{line:223,column:4},end:{line:223,column:19}},"30":{start:{line:225,column:8},end:{line:225,column:33}},"31":{start:{line:280,column:0},end:{line:287,column:3}},"32":{start:{line:281,column:4},end:{line:286,column:5}},"33":{start:{line:282,column:24},end:{line:282,column:69}},"34":{start:{line:283,column:4},end:{line:283,column:26}},"35":{start:{line:285,column:8},end:{line:285,column:33}},"36":{start:{line:357,column:0},end:{line:368,column:3}},"37":{start:{line:359,column:4},end:{line:367,column:5}},"38":{start:{line:360,column:24},end:{line:363,column:9}},"39":{start:{line:364,column:4},end:{line:364,column:26}},"40":{start:{line:366,column:8},end:{line:366,column:33}},"41":{start:{line:420,column:0},end:{line:439,column:3}},"42":{start:{line:421,column:4},end:{line:438,column:6}},"43":{start:{line:422,column:21},end:{line:422,column:59}},"44":{start:{line:425,column:10},end:{line:428,column:11}},"45":{start:{line:425,column:37},end:{line:425,column:67}},"46":{start:{line:426,column:14},end:{line:426,column:71}},"47":{start:{line:429,column:10},end:{line:429,column:39}},"48":{start:{line:430,column:10},end:{line:430,column:55}},"49":{start:{line:431,column:10},end:{line:431,column:28}},"50":{start:{line:432,column:10},end:{line:432,column:31}},"51":{start:{line:433,column:10},end:{line:433,column:28}},"52":{start:{line:436,column:9},end:{line:436,column:36}},"53":{start:{line:437,column:9},end:{line:437,column:57}},"54":{start:{line:492,column:0},end:{line:517,column:3}},"55":{start:{line:493,column:4},end:{line:516,column:6}},"56":{start:{line:494,column:21},end:{line:494,column:59}},"57":{start:{line:500,column:9},end:{line:504,column:10}},"58":{start:{line:501,column:39},end:{line:501,column:64}},"59":{start:{line:503,column:13},end:{line:503,column:80}},"60":{start:{line:507,column:28},end:{line:507,column:83}},"61":{start:{line:507,column:51},end:{line:507,column:60}},"62":{start:{line:508,column:8},end:{line:508,column:42}},"63":{start:{line:509,column:8},end:{line:509,column:26}},"64":{start:{line:510,column:8},end:{line:510,column:29}},"65":{start:{line:514,column:9},end:{line:514,column:36}},"66":{start:{line:515,column:9},end:{line:515,column:57}},"67":{start:{line:580,column:0},end:{line:598,column:3}},"68":{start:{line:581,column:4},end:{line:597,column:5}},"69":{start:{line:582,column:21},end:{line:582,column:58}},"70":{start:{line:583,column:21},end:{line:583,column:55}},"71":{start:{line:584,column:27},end:{line:588,column:9}},"72":{start:{line:589,column:8},end:{line:589,column:42}},"73":{start:{line:590,column:8},end:{line:590,column:26}},"74":{start:{line:591,column:8},end:{line:591,column:31}},"75":{start:{line:595,column:8},end:{line:595,column:35}},"76":{start:{line:596,column:8},end:{line:596,column:56}},"77":{start:{line:655,column:0},end:{line:681,column:3}},"78":{start:{line:656,column:4},end:{line:680,column:5}},"79":{start:{line:657,column:21},end:{line:657,column:55}},"80":{start:{line:660,column:24},end:{line:660,column:91}},"81":{start:{line:660,column:54},end:{line:660,column:90}},"82":{start:{line:661,column:8},end:{line:663,column:9}},"83":{start:{line:662,column:12},end:{line:662,column:77}},"84":{start:{line:671,column:28},end:{line:671,column:96}},"85":{start:{line:671,column:57},end:{line:671,column:69}},"86":{start:{line:672,column:8},end:{line:672,column:45}},"87":{start:{line:673,column:8},end:{line:673,column:26}},"88":{start:{line:674,column:8},end:{line:674,column:32}},"89":{start:{line:678,column:8},end:{line:678,column:35}},"90":{start:{line:679,column:8},end:{line:679,column:45}},"91":{start:{line:689,column:0},end:{line:689,column:24}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:12,column:18},end:{line:12,column:19}},loc:{start:{line:12,column:40},end:{line:14,column:6}},line:12},"1":{name:"(anonymous_1)",decl:{start:{line:15,column:15},end:{line:15,column:16}},loc:{start:{line:15,column:37},end:{line:18,column:6}},line:15},"2":{name:"(anonymous_2)",decl:{start:{line:70,column:16},end:{line:70,column:17}},loc:{start:{line:70,column:34},end:{line:78,column:1}},line:70},"3":{name:"(anonymous_3)",decl:{start:{line:143,column:46},end:{line:143,column:47}},loc:{start:{line:143,column:65},end:{line:163,column:1}},line:143},"4":{name:"(anonymous_4)",decl:{start:{line:220,column:30},end:{line:220,column:31}},loc:{start:{line:220,column:48},end:{line:227,column:1}},line:220},"5":{name:"(anonymous_5)",decl:{start:{line:280,column:33},end:{line:280,column:34}},loc:{start:{line:280,column:51},end:{line:287,column:1}},line:280},"6":{name:"(anonymous_6)",decl:{start:{line:357,column:32},end:{line:357,column:33}},loc:{start:{line:357,column:50},end:{line:368,column:1}},line:357},"7":{name:"(anonymous_7)",decl:{start:{line:420,column:35},end:{line:420,column:36}},loc:{start:{line:420,column:53},end:{line:439,column:1}},line:420},"8":{name:"(anonymous_8)",decl:{start:{line:425,column:29},end:{line:425,column:30}},loc:{start:{line:425,column:37},end:{line:425,column:67}},line:425},"9":{name:"(anonymous_9)",decl:{start:{line:492,column:37},end:{line:492,column:38}},loc:{start:{line:492,column:55},end:{line:517,column:1}},line:492},"10":{name:"(anonymous_10)",decl:{start:{line:501,column:31},end:{line:501,column:32}},loc:{start:{line:501,column:39},end:{line:501,column:64}},line:501},"11":{name:"(anonymous_11)",decl:{start:{line:507,column:43},end:{line:507,column:44}},loc:{start:{line:507,column:51},end:{line:507,column:60}},line:507},"12":{name:"(anonymous_12)",decl:{start:{line:580,column:35},end:{line:580,column:36}},loc:{start:{line:580,column:53},end:{line:598,column:1}},line:580},"13":{name:"(anonymous_13)",decl:{start:{line:655,column:48},end:{line:655,column:49}},loc:{start:{line:655,column:66},end:{line:681,column:1}},line:655},"14":{name:"(anonymous_14)",decl:{start:{line:660,column:43},end:{line:660,column:44}},loc:{start:{line:660,column:54},end:{line:660,column:90}},line:660},"15":{name:"(anonymous_15)",decl:{start:{line:671,column:46},end:{line:671,column:47}},loc:{start:{line:671,column:57},end:{line:671,column:69}},line:671}},branchMap:{"0":{loc:{start:{line:152,column:6},end:{line:154,column:7}},type:"if",locations:[{start:{line:152,column:6},end:{line:154,column:7}},{start:{line:152,column:6},end:{line:154,column:7}}],line:152},"1":{loc:{start:{line:425,column:10},end:{line:428,column:11}},type:"if",locations:[{start:{line:425,column:10},end:{line:428,column:11}},{start:{line:425,column:10},end:{line:428,column:11}}],line:425},"2":{loc:{start:{line:500,column:9},end:{line:504,column:10}},type:"if",locations:[{start:{line:500,column:9},end:{line:504,column:10}},{start:{line:500,column:9},end:{line:504,column:10}}],line:500},"3":{loc:{start:{line:661,column:8},end:{line:663,column:9}},type:"if",locations:[{start:{line:661,column:8},end:{line:663,column:9}},{start:{line:661,column:8},end:{line:663,column:9}}],line:661}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"7957b72e55a4373b45228fded6e647d011e3fd3d"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_hh5l20act=function(){return actualCoverage;};}return actualCoverage;}cov_hh5l20act();const express=(cov_hh5l20act().s[0]++,require('express'));const router=(cov_hh5l20act().s[1]++,express.Router());const Post=(cov_hh5l20act().s[2]++,require('../models/Post'));const User=(cov_hh5l20act().s[3]++,require('../models/User'));const multer=(cov_hh5l20act().s[4]++,require('multer'));const path=(cov_hh5l20act().s[5]++,require('path'));const verify=(cov_hh5l20act().s[6]++,require('./verifyRoute'));//Storage for images
var storage=(cov_hh5l20act().s[7]++,multer.diskStorage({destination:function(req,file,cb){cov_hh5l20act().f[0]++;cov_hh5l20act().s[8]++;cb(null,'Images/');},filename:function(req,file,cb){cov_hh5l20act().f[1]++;let ext=(cov_hh5l20act().s[9]++,path.extname(file.originalname));cov_hh5l20act().s[10]++;cb(null,Date.now()+ext);}}));// Images
var image=(cov_hh5l20act().s[11]++,multer({storage:storage}));/** 
* @swagger
* /posts:
*  get:
*    summary: Getting all posts
*    tags: [Posts]
*    description: Returns all posts
*    responses:
*     200:
*       description: These are all Posts available on the blog
*       content:
*         application/json:
*           schema:
*             type: array
*     400:
*       description: Bad Request
*       content:
*         application/json:
*           schema:
*             type: array
*     500:
*       description: Internal Server Error
*       content:
*         application/json:
*           schema:
*             type: array
*     401:
*       description: Unauthorized
*       content:
*         application/json:
*           schema:
*             type: array
*     404:
*       description: Not Found
*       content:
*         application/json:
*           schema:
*             type: array
*/ // ALL POSTS
cov_hh5l20act().s[12]++;router.get('/',async(req,res)=>{cov_hh5l20act().f[2]++;cov_hh5l20act().s[13]++;// res.send("We are on posts");
try{const posts=(cov_hh5l20act().s[14]++,await Post.find());cov_hh5l20act().s[15]++;res.json(posts);}catch(err){cov_hh5l20act().s[16]++;res.json({message:err});}});// CREATE A POST
/** 
* @swagger
* /posts:
*  post:
*    summary: Creating a new post
*    tags: [Posts]
*    description: Creates a post
*    parameters:
*      - name: auth-token
*        description: Your auth-token
*        in: header
*        type: string
*        required: true 
*    requestBody:
*      description: Provide Blog details
*      content:
*          application/json:
*            schema:
*              type: object
*              properties: 
*                title:
*                  type: string
*                description:
*                  type: string
*                imageUrl:
*                  type: string
*    responses:
*     200:
*       description: Post Created Successfully
*       content:
*         application/json:
*           schema:
*             type: array
*     400:
*       description: Bad Request
*       content:
*         application/json:
*           schema:
*             type: array
*     500:
*       description: Internal Server Error
*       content:
*         application/json:
*           schema:
*             type: array
*     404:
*       description: Not Found
*       content:
*         application/json:
*           schema:
*             type: array
*     401:
*       description: Unauthorized
*       content:
*         application/json:
*           schema:
*             type: array
*/cov_hh5l20act().s[17]++;router.post('/',image.single('image'),verify,async(req,res)=>{cov_hh5l20act().f[3]++;const user=(cov_hh5l20act().s[18]++,await User.findById(req.user.user.id).select('-password'));const post=(cov_hh5l20act().s[19]++,new Post({title:req.body.title,description:req.body.description,user:user.id,name:user.name}));cov_hh5l20act().s[20]++;if(req.file){cov_hh5l20act().b[0][0]++;cov_hh5l20act().s[21]++;post.Image=req.file.path;}else{cov_hh5l20act().b[0][1]++;}cov_hh5l20act().s[22]++;try{const savedPost=(cov_hh5l20act().s[23]++,await post.save());cov_hh5l20act().s[24]++;res.status(201).json(savedPost);}catch(err){cov_hh5l20act().s[25]++;res.json({message:err});}});/** 
* @swagger
* /posts/{postId}:
*  get:
*    security:
*      - bearerAuth: []
*    summary: Getting specific posts
*    tags: [Posts]
*    description: Returns a specific posts
*    parameters:
*      - name: postId
*        description: Id of the post needed
*        in: path
*        required: true
*      - name: auth-token
*        description: Your auth-token
*        in: header
*        type: string
*        required: true   
*    responses:
*     200:
*       description: This is the post you requested
*       content:
*         application/json:
*           schema:
*             type: array
*     400:
*       description: Bad Request
*       content:
*         application/json:
*           schema:
*             type: array
*     500:
*       description: Internal Server Error
*       content:
*         application/json:
*           schema:
*             type: array
*     404:
*       description: Not Found
*       content:
*         application/json:
*           schema:
*             type: array
*     401:
*       description: Unauthorized
*       content:
*         application/json:
*           schema:
*             type: array
*/ //SPECIFIC POST
cov_hh5l20act().s[26]++;router.get('/:postId',verify,async(req,res)=>{cov_hh5l20act().f[4]++;cov_hh5l20act().s[27]++;try{const post=(cov_hh5l20act().s[28]++,await Post.findById(req.params.postId));cov_hh5l20act().s[29]++;res.json(post);}catch(err){cov_hh5l20act().s[30]++;res.json({message:err});}});// DELETE POST
/** 
* @swagger
* /posts/{postId}:
*  delete:
*    summary: Deleting a specific post
*    tags: [Posts]
*    description: Deletes a specific posts
*    parameters:
*      - name: postId
*        description: Id of the post needed
*        in: path
*        required: true
*      - name: auth-token
*        description: Your auth-token
*        in: header
*        type: string
*        required: true    
*    responses:
*     200:
*       description: Post deleted
*       content:
*         application/json:
*           schema:
*             type: array
*     400:
*       description: Bad Request
*       content:
*         application/json:
*           schema:
*             type: array
*     500:
*       description: Internal Server Error
*       content:
*         application/json:
*           schema:
*             type: array
*     401:
*       description: Unauthorized
*       content:
*         application/json:
*           schema:
*             type: array
*     404:
*       description: Not Found
*       content:
*         application/json:
*           schema:
*             type: array
*/cov_hh5l20act().s[31]++;router.delete('/:postId',verify,async(req,res)=>{cov_hh5l20act().f[5]++;cov_hh5l20act().s[32]++;try{const deletedPost=(cov_hh5l20act().s[33]++,await Post.remove({_id:req.params.postId}));cov_hh5l20act().s[34]++;res.json(deletedPost);}catch(err){cov_hh5l20act().s[35]++;res.json({message:err});}});// UPDATE POST
/** 
* @swagger
* /posts:
*  patch:
*    summary: Updating a post
*    tags: [Posts]
*    description: Updates a post
*    parameters:
*      - name: postId
*        description: Id of the post needed
*        in: path
*        required: true
*      - name: auth-token
*        description: Your auth-token
*        in: header
*        type: string
*        required: true 
*    requestBody:
*      description: Provide new post details
*      content:
*          application/json:
*            schema:
*              type: object
*              properties: 
*                title:
*                  type: string
*                description:
*                  type: string
*                imageUrl:
*                  type: string
*    responses:
*     200:
*       description: Post Updated Successfully
*       content:
*         application/json:
*           schema:
*             type: array
*     400:
*       description: Bad Request
*       content:
*         application/json:
*           schema:
*             type: array
*     500:
*       description: Internal Server Error
*       content:
*         application/json:
*           schema:
*             type: array
*     401:
*       description: Unauthorized
*       content:
*         application/json:
*           schema:
*             type: array
*     404:
*       description: Not Found
*       content:
*         application/json:
*           schema:
*             type: array
*/ // router.patch('/:postId', async(req,res) => {
cov_hh5l20act().s[36]++;router.patch('/:postId',verify,async(req,res)=>{cov_hh5l20act().f[6]++;cov_hh5l20act().s[37]++;try{const updatedPost=(cov_hh5l20act().s[38]++,await Post.updateOne({_id:req.params.postId},{$set:{title:req.body.title}}));cov_hh5l20act().s[39]++;res.json(updatedPost);}catch(err){cov_hh5l20act().s[40]++;res.json({message:err});}});// LIKING A POST
/** 
* @swagger
* /posts/like/{postId}:
*  put:
*    summary: Liking a specific post
*    tags: [Posts]
*    description: Likes a specific post
*    parameters:
*      - name: postId
*        description: Id of the post needed
*        in: path
*        required: true
*      - name: auth-token
*        description: Your auth-token
*        in: header
*        type: string
*        required: true  
*    responses:
*     200:
*       description: Post Liked
*       content:
*         application/json:
*           schema:
*             type: array
*     400:
*       description: Bad Request
*       content:
*         application/json:
*           schema:
*             type: array
*     500:
*       description: Internal Server Error
*       content:
*         application/json:
*           schema:
*             type: array
*     401:
*       description: Unauthorized
*       content:
*         application/json:
*           schema:
*             type: array
*     404:
*       description: Not Found
*       content:
*         application/json:
*           schema:
*             type: array
*/cov_hh5l20act().s[41]++;router.put('/like/:postId',verify,async(req,res)=>{cov_hh5l20act().f[7]++;cov_hh5l20act().s[42]++;try{const post=(cov_hh5l20act().s[43]++,await Post.findById(req.params.postId));// check if post has been liked before
cov_hh5l20act().s[44]++;if(post.likes.find(like=>{cov_hh5l20act().f[8]++;cov_hh5l20act().s[45]++;return like.user===req.user.user.id;})){cov_hh5l20act().b[1][0]++;cov_hh5l20act().s[46]++;return res.status(400).json({msg:"Post already Liked"});}else{cov_hh5l20act().b[1][1]++;}cov_hh5l20act().s[47]++;console.log(post.likes.user);cov_hh5l20act().s[48]++;post.likes.unshift({user:req.user.user.id});cov_hh5l20act().s[49]++;await post.save();cov_hh5l20act().s[50]++;res.json(post.likes);cov_hh5l20act().s[51]++;console.log(post);}catch(err){cov_hh5l20act().s[52]++;console.error(err.message);cov_hh5l20act().s[53]++;res.status(500).json({Message:"Server Error"});}});// UNLIKING A POST
/** 
* @swagger
* /posts/unlike/{postId}:
*  put:
*    summary: Unliking a specific post
*    tags: [Posts]
*    description: Unlikes a specific post
*    parameters:
*      - name: postId
*        description: Id of the post needed
*        in: path
*        required: true
*      - name: auth-token
*        description: Your auth-token
*        in: header
*        type: string
*        required: true   
*    responses:
*     200:
*       description: Post unliked
*       content:
*         application/json:
*           schema:
*             type: array
*     400:
*       description: Bad Request
*       content:
*         application/json:
*           schema:
*             type: array
*     500:
*       description: Internal Server Error
*       content:
*         application/json:
*           schema:
*             type: array
*     401:
*       description: Unauthorized
*       content:
*         application/json:
*           schema:
*             type: array
*     404:
*       description: Not Found
*       content:
*         application/json:
*           schema:
*             type: array
*/cov_hh5l20act().s[54]++;router.put('/unlike/:postId',verify,async(req,res)=>{cov_hh5l20act().f[9]++;cov_hh5l20act().s[55]++;try{const post=(cov_hh5l20act().s[56]++,await Post.findById(req.params.postId));// check if post has been liked before
//  if(post.likes.filter(like => like.users.toString() === req.user.id).length > 0){
//      return res.json(400).json({msg: "Post already Liked"});
//  }
cov_hh5l20act().s[57]++;if(post.likes.filter(like=>{cov_hh5l20act().f[10]++;cov_hh5l20act().s[58]++;return like.user===req.user.id;}).length===0){cov_hh5l20act().b[2][0]++;cov_hh5l20act().s[59]++;return res.status(400).json({msg:"Post has not been Liked yet"});}else{cov_hh5l20act().b[2][1]++;}// Get remove index
const removeIndex=(cov_hh5l20act().s[60]++,post.likes.map(like=>{cov_hh5l20act().f[11]++;cov_hh5l20act().s[61]++;return like.user;}).indexOf(req.body._id));cov_hh5l20act().s[62]++;post.likes.splice(removeIndex,1);cov_hh5l20act().s[63]++;await post.save();cov_hh5l20act().s[64]++;res.json(post.likes);}catch(err){cov_hh5l20act().s[65]++;console.error(err.message);cov_hh5l20act().s[66]++;res.status(500).json({Message:"Server Error"});}});// COMMENTS
/** 
* @swagger
* /posts/comment/{id}:
*  post:
*    summary: Commenting on a post
*    tags: [Posts]
*    description: comments on a post
*    parameters:
*      - name: id
*        description: Id of the post needed
*        in: path
*        required: true
*      - name: auth-token
*        description: Your auth-token
*        in: header
*        type: string
*        required: true 
*    requestBody:
*      description: Provide your comment here
*      content:
*          application/json:
*            schema:
*              type: object
*              properties: 
*                text:
*                  type: string
*    responses:
*     200:
*       description: Comment added Successfully
*       content:
*         application/json:
*           schema:
*             type: array
*     400:
*       description: Bad Request
*       content:
*         application/json:
*           schema:
*             type: array
*     500:
*       description: Internal Server Error
*       content:
*         application/json:
*           schema:
*             type: array
*     401:
*       description: Unauthorized
*       content:
*         application/json:
*           schema:
*             type: array
*     404:
*       description: Not Found
*       content:
*         application/json:
*           schema:
*             type: array
*/cov_hh5l20act().s[67]++;router.post('/comment/:id',verify,async(req,res)=>{cov_hh5l20act().f[12]++;cov_hh5l20act().s[68]++;try{const user=(cov_hh5l20act().s[69]++,await User.findById(req.user.user.id));const post=(cov_hh5l20act().s[70]++,await Post.findById(req.params.id));const newComment=(cov_hh5l20act().s[71]++,{text:req.body.text,name:user.name,user:user.id});cov_hh5l20act().s[72]++;post.comments.unshift(newComment);cov_hh5l20act().s[73]++;await post.save();cov_hh5l20act().s[74]++;res.json(post.comments);}catch(err){cov_hh5l20act().s[75]++;console.error(err.message);cov_hh5l20act().s[76]++;res.status(500).json({Message:'Server Error'});}});// Removing a comment
/** 
* @swagger
* /posts/comment/{id}/{comment_id}:
*  post:
*    summary: Removing a Comment from a post
*    tags: [Posts]
*    description: comments on a post
*    parameters:
*      - name: postId
*        description: Id of the post needed
*        in: path
*        required: true 
*      - name: CommentId
*        description: Id of the comment needed
*        in: path
*        required: true 
*      - name: auth-token
*        description: Your auth-token
*        in: header
*        type: string
*        required: true 
*    responses:
*     200:
*       description: Comment removed Successfully
*       content:
*         application/json:
*           schema:
*             type: array
*     400:
*       description: Bad Request
*       content:
*         application/json:
*           schema:
*             type: array
*     500:
*       description: Internal Server Error
*       content:
*         application/json:
*           schema:
*             type: array
*     401:
*       description: Unauthorized
*       content:
*         application/json:
*           schema:
*             type: array
*     404:
*       description: Not Found
*       content:
*         application/json:
*           schema:
*             type: array
*/cov_hh5l20act().s[77]++;router.post('/comment/:id/:comment_id',verify,async(req,res)=>{cov_hh5l20act().f[13]++;cov_hh5l20act().s[78]++;try{const post=(cov_hh5l20act().s[79]++,await Post.findById(req.params.id));// GET COMMENT TO BE REMOVED
const comment=(cov_hh5l20act().s[80]++,post.comments.find(comment=>{cov_hh5l20act().f[14]++;cov_hh5l20act().s[81]++;return comment.id===req.params.comment_id;}));cov_hh5l20act().s[82]++;if(!comment){cov_hh5l20act().b[3][0]++;cov_hh5l20act().s[83]++;return res.status(404).json({message:"Comment does not exist"});}else{cov_hh5l20act().b[3][1]++;}// Check user
// if(comment.user !== req.user.user.id) {
//     return res.status(401).json({message: "Unauthorized"}); 
// }
// delete
const removeIndex=(cov_hh5l20act().s[84]++,post.comments.map(comment=>{cov_hh5l20act().f[15]++;cov_hh5l20act().s[85]++;return comment.user;}).indexOf(req.user.user.id));cov_hh5l20act().s[86]++;post.comments.splice(removeIndex,1);cov_hh5l20act().s[87]++;await post.save();cov_hh5l20act().s[88]++;res.json(post.comments);}catch(err){cov_hh5l20act().s[89]++;console.error(err.message);cov_hh5l20act().s[90]++;res.status(500).send('Server Error');}});cov_hh5l20act().s[91]++;module.exports=router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,