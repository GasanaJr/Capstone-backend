function cov_2hvt473ert(){var path="C:\\Users\\HP\\OneDrive\\Desktop\\Capstone-backend\\backend\\Auth\\routes\\sendmsg.js";var hash="1c450cc8b0c3e2fa5dfe0515f4a90b751926f845";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\HP\\OneDrive\\Desktop\\Capstone-backend\\backend\\Auth\\routes\\sendmsg.js",statementMap:{"0":{start:{line:1,column:15},end:{line:1,column:42}},"1":{start:{line:2,column:25},end:{line:2,column:48}},"2":{start:{line:3,column:16},end:{line:3,column:44}},"3":{start:{line:4,column:15},end:{line:4,column:39}},"4":{start:{line:28,column:0},end:{line:36,column:3}},"5":{start:{line:29,column:4},end:{line:35,column:5}},"6":{start:{line:30,column:25},end:{line:30,column:45}},"7":{start:{line:31,column:8},end:{line:31,column:27}},"8":{start:{line:33,column:8},end:{line:33,column:35}},"9":{start:{line:73,column:0},end:{line:82,column:3}},"10":{start:{line:74,column:4},end:{line:81,column:5}},"11":{start:{line:75,column:24},end:{line:75,column:64}},"12":{start:{line:77,column:8},end:{line:77,column:25}},"13":{start:{line:79,column:8},end:{line:79,column:35}},"14":{start:{line:120,column:0},end:{line:141,column:3}},"15":{start:{line:122,column:20},end:{line:122,column:44}},"16":{start:{line:123,column:4},end:{line:123,column:68}},"17":{start:{line:123,column:14},end:{line:123,column:68}},"18":{start:{line:126,column:16},end:{line:130,column:6}},"19":{start:{line:133,column:4},end:{line:139,column:5}},"20":{start:{line:134,column:29},end:{line:134,column:45}},"21":{start:{line:135,column:8},end:{line:135,column:31}},"22":{start:{line:137,column:8},end:{line:137,column:34}},"23":{start:{line:143,column:0},end:{line:143,column:24}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:28,column:24},end:{line:28,column:25}},loc:{start:{line:28,column:43},end:{line:36,column:1}},line:28},"1":{name:"(anonymous_1)",decl:{start:{line:73,column:30},end:{line:73,column:31}},loc:{start:{line:73,column:48},end:{line:82,column:1}},line:73},"2":{name:"(anonymous_2)",decl:{start:{line:120,column:21},end:{line:120,column:22}},loc:{start:{line:120,column:40},end:{line:141,column:1}},line:120}},branchMap:{"0":{loc:{start:{line:123,column:4},end:{line:123,column:68}},type:"if",locations:[{start:{line:123,column:4},end:{line:123,column:68}},{start:{line:123,column:4},end:{line:123,column:68}}],line:123}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"1c450cc8b0c3e2fa5dfe0515f4a90b751926f845"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2hvt473ert=function(){return actualCoverage;};}return actualCoverage;}cov_2hvt473ert();const router=(cov_2hvt473ert().s[0]++,require('express').Router());const{sendValidation}=(cov_2hvt473ert().s[1]++,require('./validation'));const Message=(cov_2hvt473ert().s[2]++,require('../models/Message'));const verify=(cov_2hvt473ert().s[3]++,require('./verifyRoute'));// Get all messages
/** 
* @swagger
* /message:
*  get:
*    summary: Getting all Messages
*    tags: [Messages]
*    description: Returns all Messages
*    parameters:
*      - name: auth-token
*        description: Your auth-token
*        in: header
*        type: string
*        required: true
*    responses:
*     200:
*       description: These are all the messages available in the database
*       content:
*         application/json:
*           schema:
*             type: array
*/cov_2hvt473ert().s[4]++;router.get('/',verify,async(req,res)=>{cov_2hvt473ert().f[0]++;cov_2hvt473ert().s[5]++;try{const messages=(cov_2hvt473ert().s[6]++,await Message.find());cov_2hvt473ert().s[7]++;res.json(messages);}catch(error){cov_2hvt473ert().s[8]++;res.json({message:error});}});// Get a specific message
/** 
* @swagger
* /message/{msgId}:
*  get:
*    security:
*      - bearerAuth: []
*    summary: Getting specific Message
*    tags: [Messages]
*    description: Returns a specific Message
*    parameters:
*      - name: msgId
*        description: Id of the Message needed
*        in: path
*        required: true
*      - name: auth-token
*        description: Your auth-token
*        in: header
*        type: string
*        required: true  
*    responses:
*     200:
*       description: This is the message you requested
*       content:
*         application/json:
*           schema:
*             type: array
*     400:
*       description: Message not available
*       content:
*         application/json:
*           schema:
*             type: array
*/cov_2hvt473ert().s[9]++;router.get('/:msgId',verify,async(req,res)=>{cov_2hvt473ert().f[1]++;cov_2hvt473ert().s[10]++;try{const message=(cov_2hvt473ert().s[11]++,await Message.findById(req.params.msgId));// if(!message) return res.status(400).send("Message Unavailable");
cov_2hvt473ert().s[12]++;res.json(message);}catch(error){cov_2hvt473ert().s[13]++;res.json({message:error});}});// Sending messages
/** 
* @swagger
* /message/send:
*  post:
*    summary: Sending a new message
*    tags: [Messages]
*    description: Sends a message
*    requestBody:
*      description: Provide Message details
*      content:
*          application/json:
*            schema:
*              type: object
*              properties: 
*                name:
*                  type: string
*                email:
*                  type: string
*                content:
*                  type: string
*    responses:
*     200:
*       description: Message Sent Successfully
*       content:
*         application/json:
*           schema:
*             type: array
*     400:
*       description: Message not sent
*       content:
*         application/json:
*           schema:
*             type: array
*/cov_2hvt473ert().s[14]++;router.post('/send',async(req,res)=>{cov_2hvt473ert().f[2]++;// Data Validation
const{error}=(cov_2hvt473ert().s[15]++,sendValidation(req.body));cov_2hvt473ert().s[16]++;if(error){cov_2hvt473ert().b[0][0]++;cov_2hvt473ert().s[17]++;return res.status(400).send(error.details[0].message);}else{cov_2hvt473ert().b[0][1]++;}// Get message
const msg=(cov_2hvt473ert().s[18]++,new Message({name:req.body.name,email:req.body.email,content:req.body.content}));// Send Message
cov_2hvt473ert().s[19]++;try{const savedMessage=(cov_2hvt473ert().s[20]++,await msg.save());cov_2hvt473ert().s[21]++;res.json(savedMessage);}catch(error){cov_2hvt473ert().s[22]++;res.status(400).json(err);}});cov_2hvt473ert().s[23]++;module.exports=router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,